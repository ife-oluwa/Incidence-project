version: '3.7'

services:
  nginx:
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 3000:80
    depends_on:
      - backend
      - frontend

  redis:
    image: redis
    ports:
      - 6379:6379
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 30s
        retries: 50
    restart: always

  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: incidents
    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data:cached
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
    

  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: ['celery', '-A', 'app.tasks', 'worker', '-l', 'INFO']
    environment:
      - BROKER_URL=redis://redis:6379/0
      - RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    

  flower:
    build:
      context: backend
      dockerfile: Dockerfile
    command:  ['celery', '-A', 'app.tasks','flower', '--port=5555']
    ports:
      - 5556:5555

    restart: always
    environment:
      - RESULT_BACKEND=redis://redis:6379/0
      - BROKER_URL=redis://redis:6379/0
    depends_on:
      - backend
      - worker
      - redis
      

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    command: python app/main.py
    tty: true
    volumes:
      - ./backend:/app/:cached
      - ./.docker/.ipython:/root/.ipython:cached
    environment:
      PYTHONPATH: .
      DATABASE_URL: 'postgresql://postgres:admin@postgres:5432/postgres'
    depends_on:
      - "postgres"

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    stdin_open: true
    volumes:
      - ./frontend:/app:cached
      - ./frontend/node_modules:/app/node_modules:cached
    environment:
      - NODE_ENV=development

  influx:
    container_name: influx_db
    image: influxdb:2.6.1
    ports:
      - "8086:8086"
    volumes:
          - influx-db-volume:/var/lib/influxdb2
    environment:
          INFLUXDB_REPORTING_DISABLED: 'true'
volumes:
  db-data:
  influx-db-volume:

